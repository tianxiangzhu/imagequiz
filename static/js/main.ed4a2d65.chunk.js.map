{"version":3,"sources":["components/Entry.js","ServerInterface/server.js","components/Home.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Entry","entry","this","props","name","orgin","React","Component","server","fetchEntries","entries","Home","handleKeyDown","e","state","cursor","keyCode","length","setState","body","className","username","window","addEventListener","removeEventListener","location","user","to","Login","onSubmit","event","trim","signedIn","preventDefault","handleChange","value","target","from","pathname","type","onChange","App","basename","process","exact","path","render","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ed4a2d65.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Entry extends React.Component {\r\n    \r\n    render() {\r\n        const {entry} = this.props\r\n        return (\r\n            <div>\r\n                <div>{entry.name}</div>\r\n                <div>{entry.orgin}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Entry;","import entries from './entries';\r\nlet getEntries = () => {\r\n    // later on we will connect to a backend and fetch all\r\n    return entries;\r\n}\r\n\r\nlet server = {\r\n    fetchEntries : getEntries\r\n};\r\n\r\nexport default server;","import React from 'react';\r\nimport './Home.css';\r\nimport { Link } from \"react-router-dom\";\r\nimport Entry from './Entry';\r\nimport server from '../ServerInterface/server';\r\n\r\nclass Home extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            username:\"\",\r\n            cursor:0,\r\n            entries: []\r\n        };\r\n    }\r\n\r\n    handleKeyDown =(e) =>{\r\n        const {cursor,entries} = this.state;\r\n        if(e.keyCode === 39 && (cursor < entries.length-1)) {// right arrow key\r\n            this.setState({cursor: cursor +1});\r\n        }else if (e.keyCode === 37 && (cursor >0)) { // left arrow key\r\n            this.setState({cursor: cursor -1});\r\n        }\r\n    }\r\n\r\n    body = () => {\r\n        const {entries, cursor}= this.state;\r\n        return (\r\n            <div className=\"Content\">\r\n                {entries.length > 0 ?\r\n                <div className=\"Entry\">\r\n                    <Entry entry={entries[cursor]}/>\r\n                </div>   \r\n            :\r\n            ''}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount(){\r\n        const entries = server.fetchEntries();\r\n        this.setState({entries: entries})\r\n        window.addEventListener(\"keydown\", this.handleKeyDown);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n    }\r\n\r\n    render(){\r\n        let username='';\r\n        const location = this.props.location;\r\n        if (location){\r\n            if(location.state){\r\n                if (location.state.user){\r\n                    username = location.state.user;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"loginButton\">\r\n                    {username.length > 0 ? username\r\n                    : <Link to='/login'>Login</Link>}\r\n                </div>\r\n                <div>{this.body()}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass Login extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            username:\"\",\r\n            signedIn: false\r\n        };\r\n    }\r\n\r\n    onSubmit=(event)=>{\r\n        if(this.state.username.trim().length>0){\r\n            this.setState({signedIn:true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange =(event)=>{\r\n        const value = event.target.value;\r\n        const name = event.target.name;\r\n        this.setState({[name]: value});\r\n    }\r\n\r\n    render(){\r\n        let from = {pathname: '/', \r\n        state:{user: this.state.username}}\r\n        \r\n        if (this.state.signedIn){\r\n            return(\r\n                <Redirect to={from} />\r\n            );\r\n\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <label>Username:</label>\r\n                        <input \r\n                        type=\"text\" \r\n                        name = \"username\"\r\n                        value={this.state.username}\r\n                        onChange={this.handleChange}\r\n                        ></input>\r\n                        <button type=\"submit\">Login</button>\r\n                    </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport './App.css';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path='/' render={props => <Home {...props} />}>\n        </Route>\n        <Route path='/login'>\n          <Login />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}